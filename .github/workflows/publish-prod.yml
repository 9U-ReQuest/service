name: Publish service (prod)

on:
  workflow_dispatch:
env:
  CHANNEL: prod
  AWS_ACCESS_KEY_ID: ${{ secrets.aws_access_key_id }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.aws_secret_access_key }}
  ECR_OUTPUTS: ${{ secrets.container_registry_outputs_prod }}
  CODEDEPLOY_OUTPUTS: ${{ secrets.codedeploy_outputs_prod }}
jobs:
  docker-build:
    name: Build Docker images
    if: github.repository == '9U-ReQuest/service'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        app: [ "client", "gasi" ]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Build docker image
        run: |
          docker buildx build -t ${{ matrix.app }}:${{ github.sha }} -f apps/${{ matrix.app }}/Dockerfile .

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Push images
        run: |
          docker tag ${{ matrix.app }}:${{ github.sha }} ${{ fromJson(env.ECR_OUTPUTS).repository_url.value }}:${{ github.sha }}
          docker push ${{ fromJson(env.ECR_OUTPUTS).repository_url.value }}:${{ github.sha }}

  codedeploy:
    name: Deploy to CodeDeploy
    if: github.repository == '9U-ReQuest/service'
    needs: docker-build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      - name: Create dotenv
        working-directory: ./codedeploy
        run: |
          touch .env
          echo "CHANNEL=${{ env.CHANNEL }}" >> .env
          echo "ECR_REPOSITORY_URL=${{ fromJson(env.ECR_OUTPUTS).repository_url.value }}" >> .env
          echo "CLIENT_IMAGE_TAG=client-${{ github.sha }}" >> .env
          echo "GASI_IMAGE_TAG=client-${{ github.sha }}" >> .env
          echo "DATABASE_URI=${{ secrets.DATABASE_URI }}" >> .env
          echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> .env
          echo "KAKAO_REST_API_KEY=${{ secrets.KAKAO_REST_API_KEY }}" >> .env

      - name: Create client dotenv
        working-directory: ./codedeploy
        run: |
          touch client.env
          echo "CHANNEL=${{ env.CHANNEL }}" >> client.env
          echo "PRIVATE_GASI_API_URL=gasi.request.internal:8080" >> client.env

      - name: Create gasi dotenv
        working-directory: ./codedeploy
        run: |
          touch gasi.env
          echo "CHANNEL=${{ env.CHANNEL }}" >> gasi.env
          echo "DATABASE_URI=${{ secrets.DATABASE_URI }}" >> gasi.env
          echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> gasi.env
          echo "KAKAO_REST_API_KEY=${{ secrets.KAKAO_REST_API_KEY }}" >> gasi.env

      - name: Create deployment archive
        working-directory: ./codedeploy
        run: |
          mkdir scripts
          touch scripts/deploy.sh
          echo "aws ecr get-login-password --region ap-northeast-2 | docker login --username AWS --password-stdin ${{ fromJson(env.ECR_OUTPUTS).repository_url.value }}" >> scripts/deploy.sh
          echo "docker image prune -a -f" >> scripts/deploy.sh
          echo "docker-compose -f /var/deployment/docker-compose.yml up -d" >> scripts/deploy.sh
          zip -r ${{ github.sha }}.zip .
          aws s3 cp ${{ github.sha }}.zip s3://${{ fromJson(env.CODEDEPLOY_OUTPUTS).bucket.value }}/${{ github.sha }}.zip


      - name: Deploy to CodeDeploy
        run: |
          aws deploy create-deployment \
            --application-name ${{ fromJson(env.CODEDEPLOY_OUTPUTS).name.value }} \
            --deployment-group-name ${{ fromJson(env.CODEDEPLOY_OUTPUTS).gasi_group_name.value }} \
            --deployment-config-name CodeDeployDefault.OneAtATime \
            --s3-location bucket=${{ fromJson(env.CODEDEPLOY_OUTPUTS).bucket.value }},bundleType=zip,key=${{ github.sha }}.zip